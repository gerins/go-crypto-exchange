// Code generated by counterfeiter. DO NOT EDIT.
package mock

import (
	"context"
	"core-engine/internal/app/domains/user"
	"sync"
)

type FakeRepository struct {
	FindUserByEmailStub        func(context.Context, string) (user.User, error)
	findUserByEmailMutex       sync.RWMutex
	findUserByEmailArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	findUserByEmailReturns struct {
		result1 user.User
		result2 error
	}
	findUserByEmailReturnsOnCall map[int]struct {
		result1 user.User
		result2 error
	}
	RegisterNewUserStub        func(context.Context, user.User) (user.User, error)
	registerNewUserMutex       sync.RWMutex
	registerNewUserArgsForCall []struct {
		arg1 context.Context
		arg2 user.User
	}
	registerNewUserReturns struct {
		result1 user.User
		result2 error
	}
	registerNewUserReturnsOnCall map[int]struct {
		result1 user.User
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRepository) FindUserByEmail(arg1 context.Context, arg2 string) (user.User, error) {
	fake.findUserByEmailMutex.Lock()
	ret, specificReturn := fake.findUserByEmailReturnsOnCall[len(fake.findUserByEmailArgsForCall)]
	fake.findUserByEmailArgsForCall = append(fake.findUserByEmailArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.FindUserByEmailStub
	fakeReturns := fake.findUserByEmailReturns
	fake.recordInvocation("FindUserByEmail", []interface{}{arg1, arg2})
	fake.findUserByEmailMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRepository) FindUserByEmailCallCount() int {
	fake.findUserByEmailMutex.RLock()
	defer fake.findUserByEmailMutex.RUnlock()
	return len(fake.findUserByEmailArgsForCall)
}

func (fake *FakeRepository) FindUserByEmailCalls(stub func(context.Context, string) (user.User, error)) {
	fake.findUserByEmailMutex.Lock()
	defer fake.findUserByEmailMutex.Unlock()
	fake.FindUserByEmailStub = stub
}

func (fake *FakeRepository) FindUserByEmailArgsForCall(i int) (context.Context, string) {
	fake.findUserByEmailMutex.RLock()
	defer fake.findUserByEmailMutex.RUnlock()
	argsForCall := fake.findUserByEmailArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRepository) FindUserByEmailReturns(result1 user.User, result2 error) {
	fake.findUserByEmailMutex.Lock()
	defer fake.findUserByEmailMutex.Unlock()
	fake.FindUserByEmailStub = nil
	fake.findUserByEmailReturns = struct {
		result1 user.User
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) FindUserByEmailReturnsOnCall(i int, result1 user.User, result2 error) {
	fake.findUserByEmailMutex.Lock()
	defer fake.findUserByEmailMutex.Unlock()
	fake.FindUserByEmailStub = nil
	if fake.findUserByEmailReturnsOnCall == nil {
		fake.findUserByEmailReturnsOnCall = make(map[int]struct {
			result1 user.User
			result2 error
		})
	}
	fake.findUserByEmailReturnsOnCall[i] = struct {
		result1 user.User
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) RegisterNewUser(arg1 context.Context, arg2 user.User) (user.User, error) {
	fake.registerNewUserMutex.Lock()
	ret, specificReturn := fake.registerNewUserReturnsOnCall[len(fake.registerNewUserArgsForCall)]
	fake.registerNewUserArgsForCall = append(fake.registerNewUserArgsForCall, struct {
		arg1 context.Context
		arg2 user.User
	}{arg1, arg2})
	stub := fake.RegisterNewUserStub
	fakeReturns := fake.registerNewUserReturns
	fake.recordInvocation("RegisterNewUser", []interface{}{arg1, arg2})
	fake.registerNewUserMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRepository) RegisterNewUserCallCount() int {
	fake.registerNewUserMutex.RLock()
	defer fake.registerNewUserMutex.RUnlock()
	return len(fake.registerNewUserArgsForCall)
}

func (fake *FakeRepository) RegisterNewUserCalls(stub func(context.Context, user.User) (user.User, error)) {
	fake.registerNewUserMutex.Lock()
	defer fake.registerNewUserMutex.Unlock()
	fake.RegisterNewUserStub = stub
}

func (fake *FakeRepository) RegisterNewUserArgsForCall(i int) (context.Context, user.User) {
	fake.registerNewUserMutex.RLock()
	defer fake.registerNewUserMutex.RUnlock()
	argsForCall := fake.registerNewUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRepository) RegisterNewUserReturns(result1 user.User, result2 error) {
	fake.registerNewUserMutex.Lock()
	defer fake.registerNewUserMutex.Unlock()
	fake.RegisterNewUserStub = nil
	fake.registerNewUserReturns = struct {
		result1 user.User
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) RegisterNewUserReturnsOnCall(i int, result1 user.User, result2 error) {
	fake.registerNewUserMutex.Lock()
	defer fake.registerNewUserMutex.Unlock()
	fake.RegisterNewUserStub = nil
	if fake.registerNewUserReturnsOnCall == nil {
		fake.registerNewUserReturnsOnCall = make(map[int]struct {
			result1 user.User
			result2 error
		})
	}
	fake.registerNewUserReturnsOnCall[i] = struct {
		result1 user.User
		result2 error
	}{result1, result2}
}

func (fake *FakeRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findUserByEmailMutex.RLock()
	defer fake.findUserByEmailMutex.RUnlock()
	fake.registerNewUserMutex.RLock()
	defer fake.registerNewUserMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ user.Repository = new(FakeRepository)
